/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface LibOrderTestInterface extends ethers.utils.Interface {
  functions: {
    "calculateRemaining(tuple,uint256)": FunctionFragment;
    "hashKey(tuple)": FunctionFragment;
    "validate(tuple)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "calculateRemaining",
    values: [
      {
        maker: string;
        makeAsset: {
          assetType: { assetClass: BytesLike; data: BytesLike };
          value: BigNumberish;
        };
        taker: string;
        takeAsset: {
          assetType: { assetClass: BytesLike; data: BytesLike };
          value: BigNumberish;
        };
        salt: BigNumberish;
        start: BigNumberish;
        end: BigNumberish;
        dataType: BytesLike;
        data: BytesLike;
      },
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "hashKey",
    values: [
      {
        maker: string;
        makeAsset: {
          assetType: { assetClass: BytesLike; data: BytesLike };
          value: BigNumberish;
        };
        taker: string;
        takeAsset: {
          assetType: { assetClass: BytesLike; data: BytesLike };
          value: BigNumberish;
        };
        salt: BigNumberish;
        start: BigNumberish;
        end: BigNumberish;
        dataType: BytesLike;
        data: BytesLike;
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "validate",
    values: [
      {
        maker: string;
        makeAsset: {
          assetType: { assetClass: BytesLike; data: BytesLike };
          value: BigNumberish;
        };
        taker: string;
        takeAsset: {
          assetType: { assetClass: BytesLike; data: BytesLike };
          value: BigNumberish;
        };
        salt: BigNumberish;
        start: BigNumberish;
        end: BigNumberish;
        dataType: BytesLike;
        data: BytesLike;
      }
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "calculateRemaining",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "hashKey", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "validate", data: BytesLike): Result;

  events: {};
}

export class LibOrderTest extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: LibOrderTestInterface;

  functions: {
    calculateRemaining(
      order: {
        maker: string;
        makeAsset: {
          assetType: { assetClass: BytesLike; data: BytesLike };
          value: BigNumberish;
        };
        taker: string;
        takeAsset: {
          assetType: { assetClass: BytesLike; data: BytesLike };
          value: BigNumberish;
        };
        salt: BigNumberish;
        start: BigNumberish;
        end: BigNumberish;
        dataType: BytesLike;
        data: BytesLike;
      },
      fill: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { makeAmount: BigNumber; takeAmount: BigNumber }
    >;

    hashKey(
      order: {
        maker: string;
        makeAsset: {
          assetType: { assetClass: BytesLike; data: BytesLike };
          value: BigNumberish;
        };
        taker: string;
        takeAsset: {
          assetType: { assetClass: BytesLike; data: BytesLike };
          value: BigNumberish;
        };
        salt: BigNumberish;
        start: BigNumberish;
        end: BigNumberish;
        dataType: BytesLike;
        data: BytesLike;
      },
      overrides?: CallOverrides
    ): Promise<[string]>;

    validate(
      order: {
        maker: string;
        makeAsset: {
          assetType: { assetClass: BytesLike; data: BytesLike };
          value: BigNumberish;
        };
        taker: string;
        takeAsset: {
          assetType: { assetClass: BytesLike; data: BytesLike };
          value: BigNumberish;
        };
        salt: BigNumberish;
        start: BigNumberish;
        end: BigNumberish;
        dataType: BytesLike;
        data: BytesLike;
      },
      overrides?: CallOverrides
    ): Promise<[void]>;
  };

  calculateRemaining(
    order: {
      maker: string;
      makeAsset: {
        assetType: { assetClass: BytesLike; data: BytesLike };
        value: BigNumberish;
      };
      taker: string;
      takeAsset: {
        assetType: { assetClass: BytesLike; data: BytesLike };
        value: BigNumberish;
      };
      salt: BigNumberish;
      start: BigNumberish;
      end: BigNumberish;
      dataType: BytesLike;
      data: BytesLike;
    },
    fill: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { makeAmount: BigNumber; takeAmount: BigNumber }
  >;

  hashKey(
    order: {
      maker: string;
      makeAsset: {
        assetType: { assetClass: BytesLike; data: BytesLike };
        value: BigNumberish;
      };
      taker: string;
      takeAsset: {
        assetType: { assetClass: BytesLike; data: BytesLike };
        value: BigNumberish;
      };
      salt: BigNumberish;
      start: BigNumberish;
      end: BigNumberish;
      dataType: BytesLike;
      data: BytesLike;
    },
    overrides?: CallOverrides
  ): Promise<string>;

  validate(
    order: {
      maker: string;
      makeAsset: {
        assetType: { assetClass: BytesLike; data: BytesLike };
        value: BigNumberish;
      };
      taker: string;
      takeAsset: {
        assetType: { assetClass: BytesLike; data: BytesLike };
        value: BigNumberish;
      };
      salt: BigNumberish;
      start: BigNumberish;
      end: BigNumberish;
      dataType: BytesLike;
      data: BytesLike;
    },
    overrides?: CallOverrides
  ): Promise<void>;

  callStatic: {
    calculateRemaining(
      order: {
        maker: string;
        makeAsset: {
          assetType: { assetClass: BytesLike; data: BytesLike };
          value: BigNumberish;
        };
        taker: string;
        takeAsset: {
          assetType: { assetClass: BytesLike; data: BytesLike };
          value: BigNumberish;
        };
        salt: BigNumberish;
        start: BigNumberish;
        end: BigNumberish;
        dataType: BytesLike;
        data: BytesLike;
      },
      fill: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { makeAmount: BigNumber; takeAmount: BigNumber }
    >;

    hashKey(
      order: {
        maker: string;
        makeAsset: {
          assetType: { assetClass: BytesLike; data: BytesLike };
          value: BigNumberish;
        };
        taker: string;
        takeAsset: {
          assetType: { assetClass: BytesLike; data: BytesLike };
          value: BigNumberish;
        };
        salt: BigNumberish;
        start: BigNumberish;
        end: BigNumberish;
        dataType: BytesLike;
        data: BytesLike;
      },
      overrides?: CallOverrides
    ): Promise<string>;

    validate(
      order: {
        maker: string;
        makeAsset: {
          assetType: { assetClass: BytesLike; data: BytesLike };
          value: BigNumberish;
        };
        taker: string;
        takeAsset: {
          assetType: { assetClass: BytesLike; data: BytesLike };
          value: BigNumberish;
        };
        salt: BigNumberish;
        start: BigNumberish;
        end: BigNumberish;
        dataType: BytesLike;
        data: BytesLike;
      },
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    calculateRemaining(
      order: {
        maker: string;
        makeAsset: {
          assetType: { assetClass: BytesLike; data: BytesLike };
          value: BigNumberish;
        };
        taker: string;
        takeAsset: {
          assetType: { assetClass: BytesLike; data: BytesLike };
          value: BigNumberish;
        };
        salt: BigNumberish;
        start: BigNumberish;
        end: BigNumberish;
        dataType: BytesLike;
        data: BytesLike;
      },
      fill: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hashKey(
      order: {
        maker: string;
        makeAsset: {
          assetType: { assetClass: BytesLike; data: BytesLike };
          value: BigNumberish;
        };
        taker: string;
        takeAsset: {
          assetType: { assetClass: BytesLike; data: BytesLike };
          value: BigNumberish;
        };
        salt: BigNumberish;
        start: BigNumberish;
        end: BigNumberish;
        dataType: BytesLike;
        data: BytesLike;
      },
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    validate(
      order: {
        maker: string;
        makeAsset: {
          assetType: { assetClass: BytesLike; data: BytesLike };
          value: BigNumberish;
        };
        taker: string;
        takeAsset: {
          assetType: { assetClass: BytesLike; data: BytesLike };
          value: BigNumberish;
        };
        salt: BigNumberish;
        start: BigNumberish;
        end: BigNumberish;
        dataType: BytesLike;
        data: BytesLike;
      },
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    calculateRemaining(
      order: {
        maker: string;
        makeAsset: {
          assetType: { assetClass: BytesLike; data: BytesLike };
          value: BigNumberish;
        };
        taker: string;
        takeAsset: {
          assetType: { assetClass: BytesLike; data: BytesLike };
          value: BigNumberish;
        };
        salt: BigNumberish;
        start: BigNumberish;
        end: BigNumberish;
        dataType: BytesLike;
        data: BytesLike;
      },
      fill: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hashKey(
      order: {
        maker: string;
        makeAsset: {
          assetType: { assetClass: BytesLike; data: BytesLike };
          value: BigNumberish;
        };
        taker: string;
        takeAsset: {
          assetType: { assetClass: BytesLike; data: BytesLike };
          value: BigNumberish;
        };
        salt: BigNumberish;
        start: BigNumberish;
        end: BigNumberish;
        dataType: BytesLike;
        data: BytesLike;
      },
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    validate(
      order: {
        maker: string;
        makeAsset: {
          assetType: { assetClass: BytesLike; data: BytesLike };
          value: BigNumberish;
        };
        taker: string;
        takeAsset: {
          assetType: { assetClass: BytesLike; data: BytesLike };
          value: BigNumberish;
        };
        salt: BigNumberish;
        start: BigNumberish;
        end: BigNumberish;
        dataType: BytesLike;
        data: BytesLike;
      },
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
