/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { TestERC1155, TestERC1155Interface } from "../TestERC1155";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "account",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "operator",
        type: "address",
      },
      {
        indexed: false,
        internalType: "bool",
        name: "approved",
        type: "bool",
      },
    ],
    name: "ApprovalForAll",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "operator",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256[]",
        name: "ids",
        type: "uint256[]",
      },
      {
        indexed: false,
        internalType: "uint256[]",
        name: "values",
        type: "uint256[]",
      },
    ],
    name: "TransferBatch",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "operator",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "id",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "TransferSingle",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "string",
        name: "value",
        type: "string",
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "id",
        type: "uint256",
      },
    ],
    name: "URI",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "id",
        type: "uint256",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address[]",
        name: "accounts",
        type: "address[]",
      },
      {
        internalType: "uint256[]",
        name: "ids",
        type: "uint256[]",
      },
    ],
    name: "balanceOfBatch",
    outputs: [
      {
        internalType: "uint256[]",
        name: "",
        type: "uint256[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
      {
        internalType: "address",
        name: "operator",
        type: "address",
      },
    ],
    name: "isApprovedForAll",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "mint",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256[]",
        name: "ids",
        type: "uint256[]",
      },
      {
        internalType: "uint256[]",
        name: "amounts",
        type: "uint256[]",
      },
      {
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
    ],
    name: "safeBatchTransferFrom",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "id",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
    ],
    name: "safeTransferFrom",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "operator",
        type: "address",
      },
      {
        internalType: "bool",
        name: "approved",
        type: "bool",
      },
    ],
    name: "setApprovalForAll",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes4",
        name: "interfaceId",
        type: "bytes4",
      },
    ],
    name: "supportsInterface",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "uri",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b506115ac806100206000396000f3fe608060405234801561001057600080fd5b50600436106100825760003560e01c8062fdd58e1461008757806301ffc9a7146100ad5780630e89341c146100d0578063156e29f6146100f05780632eb2c2d6146101055780634e1273f414610118578063a22cb46514610138578063e985e9c51461014b578063f242432a14610187575b600080fd5b61009a610095366004610fcd565b61019a565b6040519081526020015b60405180910390f35b6100c06100bb3660046110f2565b610233565b60405190151581526020016100a4565b6100e36100de366004611131565b610285565b6040516100a491906112b2565b6101036100fe366004610ff6565b610319565b005b610103610113366004610e8c565b610339565b61012b610126366004611028565b610603565b6040516100a49190611271565b610103610146366004610f93565b610764565b6100c0610159366004610e5a565b6001600160a01b03918216600090815260666020908152604080832093909416825291909152205460ff1690565b610103610195366004610f31565b61083b565b60006001600160a01b03831661020b5760405162461bcd60e51b815260206004820152602b60248201527f455243313135353a2062616c616e636520717565727920666f7220746865207a60448201526a65726f206164647265737360a81b60648201526084015b60405180910390fd5b5060009081526065602090815260408083206001600160a01b03949094168352929052205490565b60006001600160e01b03198216636cdb3d1360e11b148061026457506001600160e01b031982166303a24d0760e21b145b8061027f57506301ffc9a760e01b6001600160e01b03198316145b92915050565b606060678054610294906113ee565b80601f01602080910402602001604051908101604052809291908181526020018280546102c0906113ee565b801561030d5780601f106102e25761010080835404028352916020019161030d565b820191906000526020600020905b8154815290600101906020018083116102f057829003601f168201915b50505050509050919050565b610334838383604051806020016040528060008152506109dd565b505050565b815183511461039b5760405162461bcd60e51b815260206004820152602860248201527f455243313135353a2069647320616e6420616d6f756e7473206c656e677468206044820152670dad2e6dac2e8c6d60c31b6064820152608401610202565b6001600160a01b0384166103c15760405162461bcd60e51b81526004016102029061130d565b6001600160a01b0385163314806103dd57506103dd8533610159565b6104445760405162461bcd60e51b815260206004820152603260248201527f455243313135353a207472616e736665722063616c6c6572206973206e6f74206044820152711bdddb995c881b9bdc88185c1c1c9bdd995960721b6064820152608401610202565b3360005b845181101561059557600085828151811061047357634e487b7160e01b600052603260045260246000fd5b60200260200101519050600085838151811061049f57634e487b7160e01b600052603260045260246000fd5b60209081029190910181015160008481526065835260408082206001600160a01b038e1683529093529190912054909150818110156104f05760405162461bcd60e51b815260040161020290611352565b6104fa82826113d7565b6065600085815260200190815260200160002060008c6001600160a01b03166001600160a01b0316815260200190815260200160002081905550816065600085815260200190815260200160002060008b6001600160a01b03166001600160a01b03168152602001908152602001600020600082825461057a91906113bf565b925050819055505050508061058e90611455565b9050610448565b50846001600160a01b0316866001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb87876040516105e5929190611284565b60405180910390a46105fb818787878787610ace565b505050505050565b606081518351146106685760405162461bcd60e51b815260206004820152602960248201527f455243313135353a206163636f756e747320616e6420696473206c656e677468604482015268040dad2e6dac2e8c6d60bb1b6064820152608401610202565b600083516001600160401b0381111561069157634e487b7160e01b600052604160045260246000fd5b6040519080825280602002602001820160405280156106ba578160200160208202803683370190505b50905060005b845181101561075c576107218582815181106106ec57634e487b7160e01b600052603260045260246000fd5b602002602001015185838151811061071457634e487b7160e01b600052603260045260246000fd5b602002602001015161019a565b82828151811061074157634e487b7160e01b600052603260045260246000fd5b602090810291909101015261075581611455565b90506106c0565b509392505050565b336001600160a01b03831614156107cf5760405162461bcd60e51b815260206004820152602960248201527f455243313135353a2073657474696e6720617070726f76616c20737461747573604482015268103337b91039b2b63360b91b6064820152608401610202565b3360008181526066602090815260408083206001600160a01b03871680855290835292819020805460ff191686151590811790915590519081529192917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050565b6001600160a01b0384166108615760405162461bcd60e51b81526004016102029061130d565b6001600160a01b03851633148061087d575061087d8533610159565b6108db5760405162461bcd60e51b815260206004820152602960248201527f455243313135353a2063616c6c6572206973206e6f74206f776e6572206e6f7260448201526808185c1c1c9bdd995960ba1b6064820152608401610202565b336108fb8187876108eb88610c39565b6108f488610c39565b5050505050565b60008481526065602090815260408083206001600160a01b038a1684529091529020548381101561093e5760405162461bcd60e51b815260040161020290611352565b61094884826113d7565b60008681526065602090815260408083206001600160a01b038c811685529252808320939093558816815290812080548692906109869084906113bf565b909155505060408051868152602081018690526001600160a01b03808916928a82169291861691600080516020611557833981519152910160405180910390a46109d4828888888888610c92565b50505050505050565b6001600160a01b038416610a3d5760405162461bcd60e51b815260206004820152602160248201527f455243313135353a206d696e7420746f20746865207a65726f206164647265736044820152607360f81b6064820152608401610202565b33610a4e816000876108eb88610c39565b60008481526065602090815260408083206001600160a01b038916845290915281208054859290610a809084906113bf565b909155505060408051858152602081018590526001600160a01b038088169260009291851691600080516020611557833981519152910160405180910390a46108f481600087878787610c92565b6001600160a01b0384163b156105fb5760405163bc197c8160e01b81526001600160a01b0385169063bc197c8190610b1290899089908890889088906004016111ce565b602060405180830381600087803b158015610b2c57600080fd5b505af1925050508015610b5c575060408051601f3d908101601f19168201909252610b5991810190611115565b60015b610c0957610b6861149c565b806308c379a01415610ba25750610b7d6114b4565b80610b885750610ba4565b8060405162461bcd60e51b815260040161020291906112b2565b505b60405162461bcd60e51b815260206004820152603460248201527f455243313135353a207472616e7366657220746f206e6f6e20455243313135356044820152732932b1b2b4bb32b91034b6b83632b6b2b73a32b960611b6064820152608401610202565b6001600160e01b0319811663bc197c8160e01b146109d45760405162461bcd60e51b8152600401610202906112c5565b60408051600180825281830190925260609160009190602080830190803683370190505090508281600081518110610c8157634e487b7160e01b600052603260045260246000fd5b602090810291909101015292915050565b6001600160a01b0384163b156105fb5760405163f23a6e6160e01b81526001600160a01b0385169063f23a6e6190610cd6908990899088908890889060040161122c565b602060405180830381600087803b158015610cf057600080fd5b505af1925050508015610d20575060408051601f3d908101601f19168201909252610d1d91810190611115565b60015b610d2c57610b6861149c565b6001600160e01b0319811663f23a6e6160e01b146109d45760405162461bcd60e51b8152600401610202906112c5565b80356001600160a01b0381168114610d7357600080fd5b919050565b600082601f830112610d88578081fd5b81356020610d958261139c565b604051610da28282611429565b8381528281019150858301600585901b87018401881015610dc1578586fd5b855b85811015610ddf57813584529284019290840190600101610dc3565b5090979650505050505050565b600082601f830112610dfc578081fd5b81356001600160401b03811115610e1557610e15611486565b604051610e2c601f8301601f191660200182611429565b818152846020838601011115610e40578283fd5b816020850160208301379081016020019190915292915050565b60008060408385031215610e6c578182fd5b610e7583610d5c565b9150610e8360208401610d5c565b90509250929050565b600080600080600060a08688031215610ea3578081fd5b610eac86610d5c565b9450610eba60208701610d5c565b935060408601356001600160401b0380821115610ed5578283fd5b610ee189838a01610d78565b94506060880135915080821115610ef6578283fd5b610f0289838a01610d78565b93506080880135915080821115610f17578283fd5b50610f2488828901610dec565b9150509295509295909350565b600080600080600060a08688031215610f48578081fd5b610f5186610d5c565b9450610f5f60208701610d5c565b9350604086013592506060860135915060808601356001600160401b03811115610f87578182fd5b610f2488828901610dec565b60008060408385031215610fa5578182fd5b610fae83610d5c565b915060208301358015158114610fc2578182fd5b809150509250929050565b60008060408385031215610fdf578182fd5b610fe883610d5c565b946020939093013593505050565b60008060006060848603121561100a578283fd5b61101384610d5c565b95602085013595506040909401359392505050565b6000806040838503121561103a578182fd5b82356001600160401b0380821115611050578384fd5b818501915085601f830112611063578384fd5b813560206110708261139c565b60405161107d8282611429565b8381528281019150858301600585901b870184018b101561109c578889fd5b8896505b848710156110c5576110b181610d5c565b8352600196909601959183019183016110a0565b50965050860135925050808211156110db578283fd5b506110e885828601610d78565b9150509250929050565b600060208284031215611103578081fd5b813561110e8161153d565b9392505050565b600060208284031215611126578081fd5b815161110e8161153d565b600060208284031215611142578081fd5b5035919050565b6000815180845260208085019450808401835b838110156111785781518752958201959082019060010161115c565b509495945050505050565b60008151808452815b818110156111a85760208185018101518683018201520161118c565b818111156111b95782602083870101525b50601f01601f19169290920160200192915050565b6001600160a01b0386811682528516602082015260a0604082018190526000906111fa90830186611149565b828103606084015261120c8186611149565b905082810360808401526112208185611183565b98975050505050505050565b6001600160a01b03868116825285166020820152604081018490526060810183905260a06080820181905260009061126690830184611183565b979650505050505050565b60208152600061110e6020830184611149565b6040815260006112976040830185611149565b82810360208401526112a98185611149565b95945050505050565b60208152600061110e6020830184611183565b60208082526028908201527f455243313135353a204552433131353552656365697665722072656a656374656040820152676420746f6b656e7360c01b606082015260800190565b60208082526025908201527f455243313135353a207472616e7366657220746f20746865207a65726f206164604082015264647265737360d81b606082015260800190565b6020808252602a908201527f455243313135353a20696e73756666696369656e742062616c616e636520666f60408201526939103a3930b739b332b960b11b606082015260800190565b60006001600160401b038211156113b5576113b5611486565b5060051b60200190565b600082198211156113d2576113d2611470565b500190565b6000828210156113e9576113e9611470565b500390565b600181811c9082168061140257607f821691505b6020821081141561142357634e487b7160e01b600052602260045260246000fd5b50919050565b601f8201601f191681016001600160401b038111828210171561144e5761144e611486565b6040525050565b600060001982141561146957611469611470565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b600060033d11156114b157600481823e5160e01c5b90565b600060443d10156114c25790565b6040516003193d81016004833e81513d6001600160401b0380831160248401831017156114f157505050505090565b82850191508151818111156115095750505050505090565b843d87010160208285010111156115235750505050505090565b61153260208286010187611429565b509095945050505050565b6001600160e01b03198116811461155357600080fd5b5056fec3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62a2646970667358221220825fe3280f39d83c54a0334b61836782f7870f667b5281adbf3a6ec221de395c64736f6c63430008040033";

export class TestERC1155__factory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<TestERC1155> {
    return super.deploy(overrides || {}) as Promise<TestERC1155>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): TestERC1155 {
    return super.attach(address) as TestERC1155;
  }
  connect(signer: Signer): TestERC1155__factory {
    return super.connect(signer) as TestERC1155__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TestERC1155Interface {
    return new utils.Interface(_abi) as TestERC1155Interface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): TestERC1155 {
    return new Contract(address, _abi, signerOrProvider) as TestERC1155;
  }
}
