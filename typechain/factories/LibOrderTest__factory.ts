/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { LibOrderTest, LibOrderTestInterface } from "../LibOrderTest";

const _abi = [
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "maker",
            type: "address",
          },
          {
            components: [
              {
                components: [
                  {
                    internalType: "bytes4",
                    name: "assetClass",
                    type: "bytes4",
                  },
                  {
                    internalType: "bytes",
                    name: "data",
                    type: "bytes",
                  },
                ],
                internalType: "struct LibAsset.AssetType",
                name: "assetType",
                type: "tuple",
              },
              {
                internalType: "uint256",
                name: "value",
                type: "uint256",
              },
            ],
            internalType: "struct LibAsset.Asset",
            name: "makeAsset",
            type: "tuple",
          },
          {
            internalType: "address",
            name: "taker",
            type: "address",
          },
          {
            components: [
              {
                components: [
                  {
                    internalType: "bytes4",
                    name: "assetClass",
                    type: "bytes4",
                  },
                  {
                    internalType: "bytes",
                    name: "data",
                    type: "bytes",
                  },
                ],
                internalType: "struct LibAsset.AssetType",
                name: "assetType",
                type: "tuple",
              },
              {
                internalType: "uint256",
                name: "value",
                type: "uint256",
              },
            ],
            internalType: "struct LibAsset.Asset",
            name: "takeAsset",
            type: "tuple",
          },
          {
            internalType: "uint256",
            name: "salt",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "start",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "end",
            type: "uint256",
          },
          {
            internalType: "bytes4",
            name: "dataType",
            type: "bytes4",
          },
          {
            internalType: "bytes",
            name: "data",
            type: "bytes",
          },
        ],
        internalType: "struct LibOrder.Order",
        name: "order",
        type: "tuple",
      },
      {
        internalType: "uint256",
        name: "fill",
        type: "uint256",
      },
    ],
    name: "calculateRemaining",
    outputs: [
      {
        internalType: "uint256",
        name: "makeAmount",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "takeAmount",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "maker",
            type: "address",
          },
          {
            components: [
              {
                components: [
                  {
                    internalType: "bytes4",
                    name: "assetClass",
                    type: "bytes4",
                  },
                  {
                    internalType: "bytes",
                    name: "data",
                    type: "bytes",
                  },
                ],
                internalType: "struct LibAsset.AssetType",
                name: "assetType",
                type: "tuple",
              },
              {
                internalType: "uint256",
                name: "value",
                type: "uint256",
              },
            ],
            internalType: "struct LibAsset.Asset",
            name: "makeAsset",
            type: "tuple",
          },
          {
            internalType: "address",
            name: "taker",
            type: "address",
          },
          {
            components: [
              {
                components: [
                  {
                    internalType: "bytes4",
                    name: "assetClass",
                    type: "bytes4",
                  },
                  {
                    internalType: "bytes",
                    name: "data",
                    type: "bytes",
                  },
                ],
                internalType: "struct LibAsset.AssetType",
                name: "assetType",
                type: "tuple",
              },
              {
                internalType: "uint256",
                name: "value",
                type: "uint256",
              },
            ],
            internalType: "struct LibAsset.Asset",
            name: "takeAsset",
            type: "tuple",
          },
          {
            internalType: "uint256",
            name: "salt",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "start",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "end",
            type: "uint256",
          },
          {
            internalType: "bytes4",
            name: "dataType",
            type: "bytes4",
          },
          {
            internalType: "bytes",
            name: "data",
            type: "bytes",
          },
        ],
        internalType: "struct LibOrder.Order",
        name: "order",
        type: "tuple",
      },
    ],
    name: "hashKey",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "maker",
            type: "address",
          },
          {
            components: [
              {
                components: [
                  {
                    internalType: "bytes4",
                    name: "assetClass",
                    type: "bytes4",
                  },
                  {
                    internalType: "bytes",
                    name: "data",
                    type: "bytes",
                  },
                ],
                internalType: "struct LibAsset.AssetType",
                name: "assetType",
                type: "tuple",
              },
              {
                internalType: "uint256",
                name: "value",
                type: "uint256",
              },
            ],
            internalType: "struct LibAsset.Asset",
            name: "makeAsset",
            type: "tuple",
          },
          {
            internalType: "address",
            name: "taker",
            type: "address",
          },
          {
            components: [
              {
                components: [
                  {
                    internalType: "bytes4",
                    name: "assetClass",
                    type: "bytes4",
                  },
                  {
                    internalType: "bytes",
                    name: "data",
                    type: "bytes",
                  },
                ],
                internalType: "struct LibAsset.AssetType",
                name: "assetType",
                type: "tuple",
              },
              {
                internalType: "uint256",
                name: "value",
                type: "uint256",
              },
            ],
            internalType: "struct LibAsset.Asset",
            name: "takeAsset",
            type: "tuple",
          },
          {
            internalType: "uint256",
            name: "salt",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "start",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "end",
            type: "uint256",
          },
          {
            internalType: "bytes4",
            name: "dataType",
            type: "bytes4",
          },
          {
            internalType: "bytes",
            name: "data",
            type: "bytes",
          },
        ],
        internalType: "struct LibOrder.Order",
        name: "order",
        type: "tuple",
      },
    ],
    name: "validate",
    outputs: [],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b506107ba806100206000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c8063058dbeef1461004657806387774dd91461006c5780638b22d1ff14610081575b600080fd5b61005961005436600461055f565b6100a9565b6040519081526020015b60405180910390f35b61007f61007a36600461055f565b6100c2565b005b61009461008f366004610591565b6100d6565b60408051928352602083019190915201610063565b60006100bc6100b783610674565b6100f6565b92915050565b6100d36100ce82610674565b610166565b50565b6000806100eb6100e585610674565b84610229565b915091509250929050565b80516020820151516000919061010b9061026d565b60608401515161011a9061026d565b608080860151604080516001600160a01b039096166020870152850193909352606084019190915282015260a0015b604051602081830303815290604052805190602001209050919050565b60a0810151158061017a5750428160a00151105b6101cb5760405162461bcd60e51b815260206004820152601d60248201527f4f726465722073746172742076616c69646174696f6e206661696c656400000060448201526064015b60405180910390fd5b60c081015115806101df5750428160c00151115b6100d35760405162461bcd60e51b815260206004820152601b60248201527a13dc99195c88195b99081d985b1a59185d1a5bdb8819985a5b1959602a1b60448201526064016101c2565b600080610247838560600151602001516102ca90919063ffffffff16565b9050610264846020015160200151856060015160200151836102dd565b91509250929050565b8051602080830151805190820120604051600093610149937f452a0dc408cb0d27ffc3b3caff933a5208040a53a9dbecd8d89cad2c0d40e00c939192019283526001600160e01b0319919091166020830152604082015260600190565b60006102d6828461065d565b9392505050565b60006102ea848484610344565b156103285760405162461bcd60e51b815260206004820152600e60248201526d3937bab73234b7339032b93937b960911b60448201526064016101c2565b61033c8361033686856103e2565b906103ee565b949350505050565b6000826103865760405162461bcd60e51b815260206004820152601060248201526f6469766973696f6e206279207a65726f60801b60448201526064016101c2565b811580610391575083155b1561039e575060006102d6565b600083806103bc57634e487b7160e01b600052601260045260246000fd5b85840990506103cb85846103e2565b6103d7826103e86103e2565b101595945050505050565b60006102d6828461063e565b60006102d6828461061e565b80356001600160a01b038116811461041157600080fd5b919050565b80356001600160e01b03198116811461041157600080fd5b600082601f83011261043e578081fd5b81356001600160401b03808211156104585761045861076e565b604051601f8301601f19908116603f011681019082821181831017156104805761048061076e565b81604052838152866020858801011115610498578485fd5b8360208701602083013792830160200193909352509392505050565b6000604082840312156104c5578081fd5b6104cd6105d3565b905081356001600160401b03808211156104e657600080fd5b90830190604082860312156104fa57600080fd5b6105026105d3565b61050b83610416565b815260208301358281111561051f57600080fd5b61052b8782860161042e565b6020830152508084525050506020820135602082015292915050565b60006101208284031215610559578081fd5b50919050565b600060208284031215610570578081fd5b81356001600160401b03811115610585578182fd5b61033c84828501610547565b600080604083850312156105a3578081fd5b82356001600160401b038111156105b8578182fd5b6105c485828601610547565b95602094909401359450505050565b604080519081016001600160401b03811182821017156105f5576105f561076e565b60405290565b60405161012081016001600160401b03811182821017156105f5576105f561076e565b60008261063957634e487b7160e01b81526012600452602481fd5b500490565b600081600019048311821515161561065857610658610758565b500290565b60008282101561066f5761066f610758565b500390565b60006101208236031215610686578081fd5b61068e6105fb565b610697836103fa565b815260208301356001600160401b03808211156106b2578384fd5b6106be368387016104b4565b60208401526106cf604086016103fa565b604084015260608501359150808211156106e7578384fd5b6106f3368387016104b4565b60608401526080850135608084015260a085013560a084015260c085013560c084015261072260e08601610416565b60e08401526101009150818501358181111561073c578485fd5b6107483682880161042e565b8385015250505080915050919050565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fdfea264697066735822122084d309fac4714e1ba87b51db8c14297584efccfa5620273d563195ff4122320164736f6c63430008040033";

export class LibOrderTest__factory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<LibOrderTest> {
    return super.deploy(overrides || {}) as Promise<LibOrderTest>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): LibOrderTest {
    return super.attach(address) as LibOrderTest;
  }
  connect(signer: Signer): LibOrderTest__factory {
    return super.connect(signer) as LibOrderTest__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): LibOrderTestInterface {
    return new utils.Interface(_abi) as LibOrderTestInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): LibOrderTest {
    return new Contract(address, _abi, signerOrProvider) as LibOrderTest;
  }
}
