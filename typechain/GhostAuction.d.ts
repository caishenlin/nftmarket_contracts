/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface GhostAuctionInterface extends ethers.utils.Interface {
  functions: {
    "auctions(uint256)": FunctionFragment;
    "cancelAuction(uint256)": FunctionFragment;
    "createAuction(uint256,uint256,uint256,address,uint8,uint256,uint256,uint256,uint256)": FunctionFragment;
    "createBid(uint256,uint256)": FunctionFragment;
    "deleteAuctionOnlyAdmin(uint256)": FunctionFragment;
    "getCurrentAuctionId()": FunctionFragment;
    "getCurrentPrice(tuple)": FunctionFragment;
    "getEndAuctionData(uint256)": FunctionFragment;
    "maxAuctionDuration()": FunctionFragment;
    "minAuctionDuration()": FunctionFragment;
    "minBidIncrementPercentAuction()": FunctionFragment;
    "owner()": FunctionFragment;
    "pauseContract()": FunctionFragment;
    "paused()": FunctionFragment;
    "recoverAVAX(uint256)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setMaxAuctionDuration(uint256)": FunctionFragment;
    "setMinAuctionDuration(uint256)": FunctionFragment;
    "setMinBidIncrementPercent(uint8)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "unpauseContract()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "auctions",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelAuction",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createAuction",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "createBid",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "deleteAuctionOnlyAdmin",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentAuctionId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentPrice",
    values: [
      {
        amount: BigNumberish;
        duration: BigNumberish;
        firstBidTime: BigNumberish;
        reservePrice: BigNumberish;
        bidder: string;
        creator: string;
        nftContract: string;
        tokenId: BigNumberish;
        auctionType: BigNumberish;
        startingAt: BigNumberish;
        startingPrice: BigNumberish;
        endingPrice: BigNumberish;
        extensionPeriod: BigNumberish;
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getEndAuctionData",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "maxAuctionDuration",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "minAuctionDuration",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "minBidIncrementPercentAuction",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pauseContract",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "recoverAVAX",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxAuctionDuration",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMinAuctionDuration",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMinBidIncrementPercent",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "unpauseContract",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "auctions", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "cancelAuction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createAuction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "createBid", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "deleteAuctionOnlyAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentAuctionId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEndAuctionData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxAuctionDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minAuctionDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minBidIncrementPercentAuction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pauseContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "recoverAVAX",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaxAuctionDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMinAuctionDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMinBidIncrementPercent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unpauseContract",
    data: BytesLike
  ): Result;

  events: {
    "OrderBid(uint256,address,uint256,address,uint256)": EventFragment;
    "OrderCancelled(uint256,address,uint256)": EventFragment;
    "OrderCreated(uint256,uint256,address,uint256,uint256,uint256,uint8,uint256,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Paused(address)": EventFragment;
    "Unpaused(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OrderBid"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OrderCancelled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OrderCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Paused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unpaused"): EventFragment;
}

export type OrderBidEvent = TypedEvent<
  [BigNumber, string, BigNumber, string, BigNumber] & {
    auctionId: BigNumber;
    nftContractAddress: string;
    tokenId: BigNumber;
    sender: string;
    value: BigNumber;
  }
>;

export type OrderCancelledEvent = TypedEvent<
  [BigNumber, string, BigNumber] & {
    auctionId: BigNumber;
    nftContractAddress: string;
    tokenId: BigNumber;
  }
>;

export type OrderCreatedEvent = TypedEvent<
  [
    BigNumber,
    BigNumber,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    number,
    BigNumber,
    BigNumber
  ] & {
    auctionId: BigNumber;
    tokenId: BigNumber;
    nftContractAddress: string;
    duration: BigNumber;
    reservePrice: BigNumber;
    endPrice: BigNumber;
    auctionType: number;
    startingAt: BigNumber;
    extensionPeriod: BigNumber;
  }
>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string] & { previousOwner: string; newOwner: string }
>;

export type PausedEvent = TypedEvent<[string] & { account: string }>;

export type UnpausedEvent = TypedEvent<[string] & { account: string }>;

export class GhostAuction extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: GhostAuctionInterface;

  functions: {
    auctions(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        string,
        string,
        string,
        BigNumber,
        number,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        amount: BigNumber;
        duration: BigNumber;
        firstBidTime: BigNumber;
        reservePrice: BigNumber;
        bidder: string;
        creator: string;
        nftContract: string;
        tokenId: BigNumber;
        auctionType: number;
        startingAt: BigNumber;
        startingPrice: BigNumber;
        endingPrice: BigNumber;
        extensionPeriod: BigNumber;
      }
    >;

    cancelAuction(
      auctionId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    createAuction(
      tokenId: BigNumberish,
      duration: BigNumberish,
      reservePrice: BigNumberish,
      nftContractAddress: string,
      auctionType: BigNumberish,
      startingPrice: BigNumberish,
      endingPrice: BigNumberish,
      startDate: BigNumberish,
      extensionPeriod: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    createBid(
      auctionId: BigNumberish,
      amount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    deleteAuctionOnlyAdmin(
      auctionId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getCurrentAuctionId(overrides?: CallOverrides): Promise<[BigNumber]>;

    getCurrentPrice(
      auction: {
        amount: BigNumberish;
        duration: BigNumberish;
        firstBidTime: BigNumberish;
        reservePrice: BigNumberish;
        bidder: string;
        creator: string;
        nftContract: string;
        tokenId: BigNumberish;
        auctionType: BigNumberish;
        startingAt: BigNumberish;
        startingPrice: BigNumberish;
        endingPrice: BigNumberish;
        extensionPeriod: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getEndAuctionData(
      auctionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [BigNumber, string, BigNumber, string] & {
          auctionId: BigNumber;
          winner: string;
          amount: BigNumber;
          creator: string;
        }
      ]
    >;

    maxAuctionDuration(overrides?: CallOverrides): Promise<[BigNumber]>;

    minAuctionDuration(overrides?: CallOverrides): Promise<[BigNumber]>;

    minBidIncrementPercentAuction(overrides?: CallOverrides): Promise<[number]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    pauseContract(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    recoverAVAX(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMaxAuctionDuration(
      maxDurationExtVar: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMinAuctionDuration(
      minDurationExtVar: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMinBidIncrementPercent(
      minBidIncrementPercentExtVar: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    unpauseContract(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  auctions(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      string,
      string,
      string,
      BigNumber,
      number,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber
    ] & {
      amount: BigNumber;
      duration: BigNumber;
      firstBidTime: BigNumber;
      reservePrice: BigNumber;
      bidder: string;
      creator: string;
      nftContract: string;
      tokenId: BigNumber;
      auctionType: number;
      startingAt: BigNumber;
      startingPrice: BigNumber;
      endingPrice: BigNumber;
      extensionPeriod: BigNumber;
    }
  >;

  cancelAuction(
    auctionId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  createAuction(
    tokenId: BigNumberish,
    duration: BigNumberish,
    reservePrice: BigNumberish,
    nftContractAddress: string,
    auctionType: BigNumberish,
    startingPrice: BigNumberish,
    endingPrice: BigNumberish,
    startDate: BigNumberish,
    extensionPeriod: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  createBid(
    auctionId: BigNumberish,
    amount: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  deleteAuctionOnlyAdmin(
    auctionId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getCurrentAuctionId(overrides?: CallOverrides): Promise<BigNumber>;

  getCurrentPrice(
    auction: {
      amount: BigNumberish;
      duration: BigNumberish;
      firstBidTime: BigNumberish;
      reservePrice: BigNumberish;
      bidder: string;
      creator: string;
      nftContract: string;
      tokenId: BigNumberish;
      auctionType: BigNumberish;
      startingAt: BigNumberish;
      startingPrice: BigNumberish;
      endingPrice: BigNumberish;
      extensionPeriod: BigNumberish;
    },
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getEndAuctionData(
    auctionId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, string, BigNumber, string] & {
      auctionId: BigNumber;
      winner: string;
      amount: BigNumber;
      creator: string;
    }
  >;

  maxAuctionDuration(overrides?: CallOverrides): Promise<BigNumber>;

  minAuctionDuration(overrides?: CallOverrides): Promise<BigNumber>;

  minBidIncrementPercentAuction(overrides?: CallOverrides): Promise<number>;

  owner(overrides?: CallOverrides): Promise<string>;

  pauseContract(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  recoverAVAX(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMaxAuctionDuration(
    maxDurationExtVar: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMinAuctionDuration(
    minDurationExtVar: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMinBidIncrementPercent(
    minBidIncrementPercentExtVar: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  unpauseContract(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    auctions(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        string,
        string,
        string,
        BigNumber,
        number,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        amount: BigNumber;
        duration: BigNumber;
        firstBidTime: BigNumber;
        reservePrice: BigNumber;
        bidder: string;
        creator: string;
        nftContract: string;
        tokenId: BigNumber;
        auctionType: number;
        startingAt: BigNumber;
        startingPrice: BigNumber;
        endingPrice: BigNumber;
        extensionPeriod: BigNumber;
      }
    >;

    cancelAuction(
      auctionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    createAuction(
      tokenId: BigNumberish,
      duration: BigNumberish,
      reservePrice: BigNumberish,
      nftContractAddress: string,
      auctionType: BigNumberish,
      startingPrice: BigNumberish,
      endingPrice: BigNumberish,
      startDate: BigNumberish,
      extensionPeriod: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    createBid(
      auctionId: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    deleteAuctionOnlyAdmin(
      auctionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    getCurrentAuctionId(overrides?: CallOverrides): Promise<BigNumber>;

    getCurrentPrice(
      auction: {
        amount: BigNumberish;
        duration: BigNumberish;
        firstBidTime: BigNumberish;
        reservePrice: BigNumberish;
        bidder: string;
        creator: string;
        nftContract: string;
        tokenId: BigNumberish;
        auctionType: BigNumberish;
        startingAt: BigNumberish;
        startingPrice: BigNumberish;
        endingPrice: BigNumberish;
        extensionPeriod: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getEndAuctionData(
      auctionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string, BigNumber, string] & {
        auctionId: BigNumber;
        winner: string;
        amount: BigNumber;
        creator: string;
      }
    >;

    maxAuctionDuration(overrides?: CallOverrides): Promise<BigNumber>;

    minAuctionDuration(overrides?: CallOverrides): Promise<BigNumber>;

    minBidIncrementPercentAuction(overrides?: CallOverrides): Promise<number>;

    owner(overrides?: CallOverrides): Promise<string>;

    pauseContract(overrides?: CallOverrides): Promise<void>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    recoverAVAX(amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setMaxAuctionDuration(
      maxDurationExtVar: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setMinAuctionDuration(
      minDurationExtVar: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setMinBidIncrementPercent(
      minBidIncrementPercentExtVar: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    unpauseContract(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "OrderBid(uint256,address,uint256,address,uint256)"(
      auctionId?: null,
      nftContractAddress?: null,
      tokenId?: null,
      sender?: null,
      value?: null
    ): TypedEventFilter<
      [BigNumber, string, BigNumber, string, BigNumber],
      {
        auctionId: BigNumber;
        nftContractAddress: string;
        tokenId: BigNumber;
        sender: string;
        value: BigNumber;
      }
    >;

    OrderBid(
      auctionId?: null,
      nftContractAddress?: null,
      tokenId?: null,
      sender?: null,
      value?: null
    ): TypedEventFilter<
      [BigNumber, string, BigNumber, string, BigNumber],
      {
        auctionId: BigNumber;
        nftContractAddress: string;
        tokenId: BigNumber;
        sender: string;
        value: BigNumber;
      }
    >;

    "OrderCancelled(uint256,address,uint256)"(
      auctionId?: null,
      nftContractAddress?: null,
      tokenId?: null
    ): TypedEventFilter<
      [BigNumber, string, BigNumber],
      { auctionId: BigNumber; nftContractAddress: string; tokenId: BigNumber }
    >;

    OrderCancelled(
      auctionId?: null,
      nftContractAddress?: null,
      tokenId?: null
    ): TypedEventFilter<
      [BigNumber, string, BigNumber],
      { auctionId: BigNumber; nftContractAddress: string; tokenId: BigNumber }
    >;

    "OrderCreated(uint256,uint256,address,uint256,uint256,uint256,uint8,uint256,uint256)"(
      auctionId?: null,
      tokenId?: null,
      nftContractAddress?: null,
      duration?: null,
      reservePrice?: null,
      endPrice?: null,
      auctionType?: null,
      startingAt?: null,
      extensionPeriod?: null
    ): TypedEventFilter<
      [
        BigNumber,
        BigNumber,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        number,
        BigNumber,
        BigNumber
      ],
      {
        auctionId: BigNumber;
        tokenId: BigNumber;
        nftContractAddress: string;
        duration: BigNumber;
        reservePrice: BigNumber;
        endPrice: BigNumber;
        auctionType: number;
        startingAt: BigNumber;
        extensionPeriod: BigNumber;
      }
    >;

    OrderCreated(
      auctionId?: null,
      tokenId?: null,
      nftContractAddress?: null,
      duration?: null,
      reservePrice?: null,
      endPrice?: null,
      auctionType?: null,
      startingAt?: null,
      extensionPeriod?: null
    ): TypedEventFilter<
      [
        BigNumber,
        BigNumber,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        number,
        BigNumber,
        BigNumber
      ],
      {
        auctionId: BigNumber;
        tokenId: BigNumber;
        nftContractAddress: string;
        duration: BigNumber;
        reservePrice: BigNumber;
        endPrice: BigNumber;
        auctionType: number;
        startingAt: BigNumber;
        extensionPeriod: BigNumber;
      }
    >;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    "Paused(address)"(
      account?: null
    ): TypedEventFilter<[string], { account: string }>;

    Paused(account?: null): TypedEventFilter<[string], { account: string }>;

    "Unpaused(address)"(
      account?: null
    ): TypedEventFilter<[string], { account: string }>;

    Unpaused(account?: null): TypedEventFilter<[string], { account: string }>;
  };

  estimateGas: {
    auctions(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    cancelAuction(
      auctionId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    createAuction(
      tokenId: BigNumberish,
      duration: BigNumberish,
      reservePrice: BigNumberish,
      nftContractAddress: string,
      auctionType: BigNumberish,
      startingPrice: BigNumberish,
      endingPrice: BigNumberish,
      startDate: BigNumberish,
      extensionPeriod: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    createBid(
      auctionId: BigNumberish,
      amount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    deleteAuctionOnlyAdmin(
      auctionId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getCurrentAuctionId(overrides?: CallOverrides): Promise<BigNumber>;

    getCurrentPrice(
      auction: {
        amount: BigNumberish;
        duration: BigNumberish;
        firstBidTime: BigNumberish;
        reservePrice: BigNumberish;
        bidder: string;
        creator: string;
        nftContract: string;
        tokenId: BigNumberish;
        auctionType: BigNumberish;
        startingAt: BigNumberish;
        startingPrice: BigNumberish;
        endingPrice: BigNumberish;
        extensionPeriod: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getEndAuctionData(
      auctionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    maxAuctionDuration(overrides?: CallOverrides): Promise<BigNumber>;

    minAuctionDuration(overrides?: CallOverrides): Promise<BigNumber>;

    minBidIncrementPercentAuction(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    pauseContract(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    recoverAVAX(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMaxAuctionDuration(
      maxDurationExtVar: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMinAuctionDuration(
      minDurationExtVar: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMinBidIncrementPercent(
      minBidIncrementPercentExtVar: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    unpauseContract(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    auctions(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    cancelAuction(
      auctionId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    createAuction(
      tokenId: BigNumberish,
      duration: BigNumberish,
      reservePrice: BigNumberish,
      nftContractAddress: string,
      auctionType: BigNumberish,
      startingPrice: BigNumberish,
      endingPrice: BigNumberish,
      startDate: BigNumberish,
      extensionPeriod: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    createBid(
      auctionId: BigNumberish,
      amount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    deleteAuctionOnlyAdmin(
      auctionId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getCurrentAuctionId(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCurrentPrice(
      auction: {
        amount: BigNumberish;
        duration: BigNumberish;
        firstBidTime: BigNumberish;
        reservePrice: BigNumberish;
        bidder: string;
        creator: string;
        nftContract: string;
        tokenId: BigNumberish;
        auctionType: BigNumberish;
        startingAt: BigNumberish;
        startingPrice: BigNumberish;
        endingPrice: BigNumberish;
        extensionPeriod: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getEndAuctionData(
      auctionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    maxAuctionDuration(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    minAuctionDuration(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    minBidIncrementPercentAuction(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pauseContract(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    recoverAVAX(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMaxAuctionDuration(
      maxDurationExtVar: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMinAuctionDuration(
      minDurationExtVar: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMinBidIncrementPercent(
      minBidIncrementPercentExtVar: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    unpauseContract(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
