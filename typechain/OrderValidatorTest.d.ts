/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface OrderValidatorTestInterface extends ethers.utils.Interface {
  functions: {
    "__OrderValidatorTest_init()": FunctionFragment;
    "assetTypeHash()": FunctionFragment;
    "assetTypeTypeHash()": FunctionFragment;
    "domainSeparator()": FunctionFragment;
    "getChainId()": FunctionFragment;
    "getHashTypedDataV4(bytes32)": FunctionFragment;
    "hashAsset(tuple)": FunctionFragment;
    "hashAssetType(tuple)": FunctionFragment;
    "hashOrder(tuple)": FunctionFragment;
    "hashTest(bytes32,bytes4,bytes)": FunctionFragment;
    "keccak256Result(bytes)": FunctionFragment;
    "orderMakerEqualsOrderSigner(tuple,bytes)": FunctionFragment;
    "orderTypeHash()": FunctionFragment;
    "recoverAddressFromSignature(tuple,bytes)": FunctionFragment;
    "recoverTest(bytes32,uint8,bytes32,bytes32)": FunctionFragment;
    "validateOrderTest(tuple,bytes)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "__OrderValidatorTest_init",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "assetTypeHash",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "assetTypeTypeHash",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "domainSeparator",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getChainId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getHashTypedDataV4",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hashAsset",
    values: [
      {
        assetType: { assetClass: BytesLike; data: BytesLike };
        value: BigNumberish;
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "hashAssetType",
    values: [{ assetClass: BytesLike; data: BytesLike }]
  ): string;
  encodeFunctionData(
    functionFragment: "hashOrder",
    values: [
      {
        maker: string;
        makeAsset: {
          assetType: { assetClass: BytesLike; data: BytesLike };
          value: BigNumberish;
        };
        taker: string;
        takeAsset: {
          assetType: { assetClass: BytesLike; data: BytesLike };
          value: BigNumberish;
        };
        salt: BigNumberish;
        start: BigNumberish;
        end: BigNumberish;
        dataType: BytesLike;
        data: BytesLike;
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "hashTest",
    values: [BytesLike, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "keccak256Result",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "orderMakerEqualsOrderSigner",
    values: [
      {
        maker: string;
        makeAsset: {
          assetType: { assetClass: BytesLike; data: BytesLike };
          value: BigNumberish;
        };
        taker: string;
        takeAsset: {
          assetType: { assetClass: BytesLike; data: BytesLike };
          value: BigNumberish;
        };
        salt: BigNumberish;
        start: BigNumberish;
        end: BigNumberish;
        dataType: BytesLike;
        data: BytesLike;
      },
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "orderTypeHash",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "recoverAddressFromSignature",
    values: [
      {
        maker: string;
        makeAsset: {
          assetType: { assetClass: BytesLike; data: BytesLike };
          value: BigNumberish;
        };
        taker: string;
        takeAsset: {
          assetType: { assetClass: BytesLike; data: BytesLike };
          value: BigNumberish;
        };
        salt: BigNumberish;
        start: BigNumberish;
        end: BigNumberish;
        dataType: BytesLike;
        data: BytesLike;
      },
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "recoverTest",
    values: [BytesLike, BigNumberish, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "validateOrderTest",
    values: [
      {
        maker: string;
        makeAsset: {
          assetType: { assetClass: BytesLike; data: BytesLike };
          value: BigNumberish;
        };
        taker: string;
        takeAsset: {
          assetType: { assetClass: BytesLike; data: BytesLike };
          value: BigNumberish;
        };
        salt: BigNumberish;
        start: BigNumberish;
        end: BigNumberish;
        dataType: BytesLike;
        data: BytesLike;
      },
      BytesLike
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "__OrderValidatorTest_init",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "assetTypeHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "assetTypeTypeHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "domainSeparator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getChainId", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getHashTypedDataV4",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "hashAsset", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "hashAssetType",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "hashOrder", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hashTest", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "keccak256Result",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "orderMakerEqualsOrderSigner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "orderTypeHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "recoverAddressFromSignature",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "recoverTest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "validateOrderTest",
    data: BytesLike
  ): Result;

  events: {};
}

export class OrderValidatorTest extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: OrderValidatorTestInterface;

  functions: {
    __OrderValidatorTest_init(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    assetTypeHash(overrides?: CallOverrides): Promise<[string]>;

    assetTypeTypeHash(overrides?: CallOverrides): Promise<[string]>;

    domainSeparator(overrides?: CallOverrides): Promise<[string]>;

    getChainId(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { chainId: BigNumber }>;

    getHashTypedDataV4(
      hash: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    hashAsset(
      asset: {
        assetType: { assetClass: BytesLike; data: BytesLike };
        value: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<[string]>;

    hashAssetType(
      assetType: { assetClass: BytesLike; data: BytesLike },
      overrides?: CallOverrides
    ): Promise<[string]>;

    hashOrder(
      order: {
        maker: string;
        makeAsset: {
          assetType: { assetClass: BytesLike; data: BytesLike };
          value: BigNumberish;
        };
        taker: string;
        takeAsset: {
          assetType: { assetClass: BytesLike; data: BytesLike };
          value: BigNumberish;
        };
        salt: BigNumberish;
        start: BigNumberish;
        end: BigNumberish;
        dataType: BytesLike;
        data: BytesLike;
      },
      overrides?: CallOverrides
    ): Promise<[string]>;

    hashTest(
      intValue: BytesLike,
      strValue: BytesLike,
      addr: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    keccak256Result(
      addr: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    orderMakerEqualsOrderSigner(
      order: {
        maker: string;
        makeAsset: {
          assetType: { assetClass: BytesLike; data: BytesLike };
          value: BigNumberish;
        };
        taker: string;
        takeAsset: {
          assetType: { assetClass: BytesLike; data: BytesLike };
          value: BigNumberish;
        };
        salt: BigNumberish;
        start: BigNumberish;
        end: BigNumberish;
        dataType: BytesLike;
        data: BytesLike;
      },
      signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<[void]>;

    orderTypeHash(overrides?: CallOverrides): Promise<[string]>;

    recoverAddressFromSignature(
      order: {
        maker: string;
        makeAsset: {
          assetType: { assetClass: BytesLike; data: BytesLike };
          value: BigNumberish;
        };
        taker: string;
        takeAsset: {
          assetType: { assetClass: BytesLike; data: BytesLike };
          value: BigNumberish;
        };
        salt: BigNumberish;
        start: BigNumberish;
        end: BigNumberish;
        dataType: BytesLike;
        data: BytesLike;
      },
      signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    recoverTest(
      messageHash: BytesLike,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    validateOrderTest(
      order: {
        maker: string;
        makeAsset: {
          assetType: { assetClass: BytesLike; data: BytesLike };
          value: BigNumberish;
        };
        taker: string;
        takeAsset: {
          assetType: { assetClass: BytesLike; data: BytesLike };
          value: BigNumberish;
        };
        salt: BigNumberish;
        start: BigNumberish;
        end: BigNumberish;
        dataType: BytesLike;
        data: BytesLike;
      },
      signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<[void]>;
  };

  __OrderValidatorTest_init(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  assetTypeHash(overrides?: CallOverrides): Promise<string>;

  assetTypeTypeHash(overrides?: CallOverrides): Promise<string>;

  domainSeparator(overrides?: CallOverrides): Promise<string>;

  getChainId(overrides?: CallOverrides): Promise<BigNumber>;

  getHashTypedDataV4(
    hash: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  hashAsset(
    asset: {
      assetType: { assetClass: BytesLike; data: BytesLike };
      value: BigNumberish;
    },
    overrides?: CallOverrides
  ): Promise<string>;

  hashAssetType(
    assetType: { assetClass: BytesLike; data: BytesLike },
    overrides?: CallOverrides
  ): Promise<string>;

  hashOrder(
    order: {
      maker: string;
      makeAsset: {
        assetType: { assetClass: BytesLike; data: BytesLike };
        value: BigNumberish;
      };
      taker: string;
      takeAsset: {
        assetType: { assetClass: BytesLike; data: BytesLike };
        value: BigNumberish;
      };
      salt: BigNumberish;
      start: BigNumberish;
      end: BigNumberish;
      dataType: BytesLike;
      data: BytesLike;
    },
    overrides?: CallOverrides
  ): Promise<string>;

  hashTest(
    intValue: BytesLike,
    strValue: BytesLike,
    addr: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  keccak256Result(addr: BytesLike, overrides?: CallOverrides): Promise<string>;

  orderMakerEqualsOrderSigner(
    order: {
      maker: string;
      makeAsset: {
        assetType: { assetClass: BytesLike; data: BytesLike };
        value: BigNumberish;
      };
      taker: string;
      takeAsset: {
        assetType: { assetClass: BytesLike; data: BytesLike };
        value: BigNumberish;
      };
      salt: BigNumberish;
      start: BigNumberish;
      end: BigNumberish;
      dataType: BytesLike;
      data: BytesLike;
    },
    signature: BytesLike,
    overrides?: CallOverrides
  ): Promise<void>;

  orderTypeHash(overrides?: CallOverrides): Promise<string>;

  recoverAddressFromSignature(
    order: {
      maker: string;
      makeAsset: {
        assetType: { assetClass: BytesLike; data: BytesLike };
        value: BigNumberish;
      };
      taker: string;
      takeAsset: {
        assetType: { assetClass: BytesLike; data: BytesLike };
        value: BigNumberish;
      };
      salt: BigNumberish;
      start: BigNumberish;
      end: BigNumberish;
      dataType: BytesLike;
      data: BytesLike;
    },
    signature: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  recoverTest(
    messageHash: BytesLike,
    v: BigNumberish,
    r: BytesLike,
    s: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  validateOrderTest(
    order: {
      maker: string;
      makeAsset: {
        assetType: { assetClass: BytesLike; data: BytesLike };
        value: BigNumberish;
      };
      taker: string;
      takeAsset: {
        assetType: { assetClass: BytesLike; data: BytesLike };
        value: BigNumberish;
      };
      salt: BigNumberish;
      start: BigNumberish;
      end: BigNumberish;
      dataType: BytesLike;
      data: BytesLike;
    },
    signature: BytesLike,
    overrides?: CallOverrides
  ): Promise<void>;

  callStatic: {
    __OrderValidatorTest_init(overrides?: CallOverrides): Promise<void>;

    assetTypeHash(overrides?: CallOverrides): Promise<string>;

    assetTypeTypeHash(overrides?: CallOverrides): Promise<string>;

    domainSeparator(overrides?: CallOverrides): Promise<string>;

    getChainId(overrides?: CallOverrides): Promise<BigNumber>;

    getHashTypedDataV4(
      hash: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    hashAsset(
      asset: {
        assetType: { assetClass: BytesLike; data: BytesLike };
        value: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<string>;

    hashAssetType(
      assetType: { assetClass: BytesLike; data: BytesLike },
      overrides?: CallOverrides
    ): Promise<string>;

    hashOrder(
      order: {
        maker: string;
        makeAsset: {
          assetType: { assetClass: BytesLike; data: BytesLike };
          value: BigNumberish;
        };
        taker: string;
        takeAsset: {
          assetType: { assetClass: BytesLike; data: BytesLike };
          value: BigNumberish;
        };
        salt: BigNumberish;
        start: BigNumberish;
        end: BigNumberish;
        dataType: BytesLike;
        data: BytesLike;
      },
      overrides?: CallOverrides
    ): Promise<string>;

    hashTest(
      intValue: BytesLike,
      strValue: BytesLike,
      addr: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    keccak256Result(
      addr: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    orderMakerEqualsOrderSigner(
      order: {
        maker: string;
        makeAsset: {
          assetType: { assetClass: BytesLike; data: BytesLike };
          value: BigNumberish;
        };
        taker: string;
        takeAsset: {
          assetType: { assetClass: BytesLike; data: BytesLike };
          value: BigNumberish;
        };
        salt: BigNumberish;
        start: BigNumberish;
        end: BigNumberish;
        dataType: BytesLike;
        data: BytesLike;
      },
      signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    orderTypeHash(overrides?: CallOverrides): Promise<string>;

    recoverAddressFromSignature(
      order: {
        maker: string;
        makeAsset: {
          assetType: { assetClass: BytesLike; data: BytesLike };
          value: BigNumberish;
        };
        taker: string;
        takeAsset: {
          assetType: { assetClass: BytesLike; data: BytesLike };
          value: BigNumberish;
        };
        salt: BigNumberish;
        start: BigNumberish;
        end: BigNumberish;
        dataType: BytesLike;
        data: BytesLike;
      },
      signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    recoverTest(
      messageHash: BytesLike,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    validateOrderTest(
      order: {
        maker: string;
        makeAsset: {
          assetType: { assetClass: BytesLike; data: BytesLike };
          value: BigNumberish;
        };
        taker: string;
        takeAsset: {
          assetType: { assetClass: BytesLike; data: BytesLike };
          value: BigNumberish;
        };
        salt: BigNumberish;
        start: BigNumberish;
        end: BigNumberish;
        dataType: BytesLike;
        data: BytesLike;
      },
      signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    __OrderValidatorTest_init(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    assetTypeHash(overrides?: CallOverrides): Promise<BigNumber>;

    assetTypeTypeHash(overrides?: CallOverrides): Promise<BigNumber>;

    domainSeparator(overrides?: CallOverrides): Promise<BigNumber>;

    getChainId(overrides?: CallOverrides): Promise<BigNumber>;

    getHashTypedDataV4(
      hash: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hashAsset(
      asset: {
        assetType: { assetClass: BytesLike; data: BytesLike };
        value: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hashAssetType(
      assetType: { assetClass: BytesLike; data: BytesLike },
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hashOrder(
      order: {
        maker: string;
        makeAsset: {
          assetType: { assetClass: BytesLike; data: BytesLike };
          value: BigNumberish;
        };
        taker: string;
        takeAsset: {
          assetType: { assetClass: BytesLike; data: BytesLike };
          value: BigNumberish;
        };
        salt: BigNumberish;
        start: BigNumberish;
        end: BigNumberish;
        dataType: BytesLike;
        data: BytesLike;
      },
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hashTest(
      intValue: BytesLike,
      strValue: BytesLike,
      addr: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    keccak256Result(
      addr: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    orderMakerEqualsOrderSigner(
      order: {
        maker: string;
        makeAsset: {
          assetType: { assetClass: BytesLike; data: BytesLike };
          value: BigNumberish;
        };
        taker: string;
        takeAsset: {
          assetType: { assetClass: BytesLike; data: BytesLike };
          value: BigNumberish;
        };
        salt: BigNumberish;
        start: BigNumberish;
        end: BigNumberish;
        dataType: BytesLike;
        data: BytesLike;
      },
      signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    orderTypeHash(overrides?: CallOverrides): Promise<BigNumber>;

    recoverAddressFromSignature(
      order: {
        maker: string;
        makeAsset: {
          assetType: { assetClass: BytesLike; data: BytesLike };
          value: BigNumberish;
        };
        taker: string;
        takeAsset: {
          assetType: { assetClass: BytesLike; data: BytesLike };
          value: BigNumberish;
        };
        salt: BigNumberish;
        start: BigNumberish;
        end: BigNumberish;
        dataType: BytesLike;
        data: BytesLike;
      },
      signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    recoverTest(
      messageHash: BytesLike,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    validateOrderTest(
      order: {
        maker: string;
        makeAsset: {
          assetType: { assetClass: BytesLike; data: BytesLike };
          value: BigNumberish;
        };
        taker: string;
        takeAsset: {
          assetType: { assetClass: BytesLike; data: BytesLike };
          value: BigNumberish;
        };
        salt: BigNumberish;
        start: BigNumberish;
        end: BigNumberish;
        dataType: BytesLike;
        data: BytesLike;
      },
      signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    __OrderValidatorTest_init(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    assetTypeHash(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    assetTypeTypeHash(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    domainSeparator(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getChainId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getHashTypedDataV4(
      hash: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hashAsset(
      asset: {
        assetType: { assetClass: BytesLike; data: BytesLike };
        value: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hashAssetType(
      assetType: { assetClass: BytesLike; data: BytesLike },
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hashOrder(
      order: {
        maker: string;
        makeAsset: {
          assetType: { assetClass: BytesLike; data: BytesLike };
          value: BigNumberish;
        };
        taker: string;
        takeAsset: {
          assetType: { assetClass: BytesLike; data: BytesLike };
          value: BigNumberish;
        };
        salt: BigNumberish;
        start: BigNumberish;
        end: BigNumberish;
        dataType: BytesLike;
        data: BytesLike;
      },
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hashTest(
      intValue: BytesLike,
      strValue: BytesLike,
      addr: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    keccak256Result(
      addr: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    orderMakerEqualsOrderSigner(
      order: {
        maker: string;
        makeAsset: {
          assetType: { assetClass: BytesLike; data: BytesLike };
          value: BigNumberish;
        };
        taker: string;
        takeAsset: {
          assetType: { assetClass: BytesLike; data: BytesLike };
          value: BigNumberish;
        };
        salt: BigNumberish;
        start: BigNumberish;
        end: BigNumberish;
        dataType: BytesLike;
        data: BytesLike;
      },
      signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    orderTypeHash(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    recoverAddressFromSignature(
      order: {
        maker: string;
        makeAsset: {
          assetType: { assetClass: BytesLike; data: BytesLike };
          value: BigNumberish;
        };
        taker: string;
        takeAsset: {
          assetType: { assetClass: BytesLike; data: BytesLike };
          value: BigNumberish;
        };
        salt: BigNumberish;
        start: BigNumberish;
        end: BigNumberish;
        dataType: BytesLike;
        data: BytesLike;
      },
      signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    recoverTest(
      messageHash: BytesLike,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    validateOrderTest(
      order: {
        maker: string;
        makeAsset: {
          assetType: { assetClass: BytesLike; data: BytesLike };
          value: BigNumberish;
        };
        taker: string;
        takeAsset: {
          assetType: { assetClass: BytesLike; data: BytesLike };
          value: BigNumberish;
        };
        salt: BigNumberish;
        start: BigNumberish;
        end: BigNumberish;
        dataType: BytesLike;
        data: BytesLike;
      },
      signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
